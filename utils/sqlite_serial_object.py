'''
Created on 16 dÃ©c. 2016

@author: home
'''

import sqlite3
import json

class SqLiteSerialObject(object):
    '''
    Superclass for saving object in the database in the following format:
    (ID, Type, JSON).
    JSON is the object data converted in JSON format.
    If the attribute is a list, only the related ID are stored.
    Each time the user do a get or a set on attributes, the object and data are synchronized.
    '''


    def __init__(self, p_id):
        '''
        Constructor
        '''

        self.objID = 0
        conn = sqlite3.connect("../mynasdb.db")
        c = conn.cursor()

        if (p_id == None):
            # insert a new empty object in the database
            # set the objID to the automatic id generated by DB
            t = (str(type(self)) ,)
            c.execute("INSERT INTO objects_serial (objectType, objectJSON) VALUES (?, NULL)", t)
            self.objID = c.lastrowid
            conn.commit()
        else:
            # select and load the object with the ID
            t = (p_id ,)
            c.execute("SELECT * FROM objects_serial WHERE objectID = ?", t)
            data=c.fetchone()
            if data is None:
                raise ObjSerialException('Object with ID %s not found' % (p_id))
            if data[1] != str(type(self)):
                raise ObjSerialException('Object with ID %s has not the correct type: %s' % (p_id, str(type(self)) ) )
            # load JSON
            self.objID = p_id
            tmp = json.loads(data[2])
            for key,val in tmp.items():
                setattr(self, key, val)
        conn.close()
        
    def setObj(self):
        # store in the database the object
        conn = sqlite3.connect("../mynasdb.db")
        c = conn.cursor()
        t = (json.dumps(self.__dict__), self.objID ,)
        c.execute("UPDATE objects_serial SET objectJSON = ? WHERE objectID = ?", t)
        conn.commit()
        conn.close()
    
    def getObj(self):
        # reload the object from the database
        pass
    
    def deleteObj(self):
        conn = sqlite3.connect("../mynasdb.db")
        c = conn.cursor()
        t = (self.objID ,)
        c.execute("DELETE FROM objects_serial WHERE objectID = ?", t)
        conn.commit()
        conn.close()

        pass
    
    def findObjectId (self, objType, key, value, unique = False):
        foundId = []
        conn = sqlite3.connect("../mynasdb.db")
        c = conn.cursor()
        t = (objType ,)
        c.execute("SELECT * FROM objects_serial WHERE objectType = ?", t)
        rows=c.fetchall()
        if rows is None:
            conn.close()
            raise ObjSerialException('No object with type %s found' % (objType))
        for row in rows:
            tmp = json.loads(row[2])
            for k,v in tmp.items():
                if (k == key and v == value):
                    foundId.append(row[0])
        conn.close()
        if (unique and len(foundId) > 1):
            raise ObjSerialException('Found %s objects while only 1 was expected' % len(foundId))
        if (len(foundId) == 0):
            raise ObjSerialException('No object found having key=\'%s\' and value=\'%s\'' % (key, value) )

        return foundId
    
class ObjSerialException(Exception):
    pass